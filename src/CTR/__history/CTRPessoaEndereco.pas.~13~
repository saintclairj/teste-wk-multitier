unit CTRPessoaEndereco;

interface

uses PessoaEndereco, Func, CTREndereco, CTREndereco_Integracao,
CTRPessoa;

type

  TCTRPessoaEndereco = class
  public
    CTREndereco: TCTREndereco;
    CTREndereco_Integracao : TCTREndereco_Integracao;
    CTRPessoa: TCTRPessoa;
    constructor Create;

    function inserir(PessoaEndereco : TPessoaEndereco) : TRetornoApi;
    function atualizar(PessoaEndereco : TPessoaEndereco) : TRetornoApi;
    function salvar(PessoaEndereco : TPessoaEndereco) : TRetornoApi;

  end;

implementation

{ TCTRPessoaEndereco }

function TCTRPessoaEndereco.atualizar(PessoaEndereco: TPessoaEndereco): Boolean;
begin

end;

constructor TCTRPessoaEndereco.Create;
begin
  CTRPessoa:= TCTRPessoa.Create;
  CTREndereco:= TCTREndereco.Create;
  CTREndereco_Integracao := TCTREndereco_Integracao.Create;
end;

function TCTRPessoaEndereco.inserir(PessoaEndereco: TPessoaEndereco): Boolean;
begin
  CTRPessoa.inserir(PessoaEndereco.pessoa);
  PessoaEndereco.endereco.idpessoa := PessoaEndereco.pessoa.idpessoa;
  CTREndereco.inserir(PessoaEndereco.endereco);
  PessoaEndereco.endereco_integracao.idendereco := PessoaEndereco.endereco.idendereco;
  CTREndereco_Integracao.inserir(PessoaEndereco.endereco_integracao);
end;

function TCTRPessoaEndereco.salvar(
  PessoaEndereco: TPessoaEndereco): TRetornoApi;
begin
  if PessoaEndereco.pessoa.idpessoa = '' then
    begin
      inserir(PessoaEndereco);
    end
  else
    begin
      atualizar(PessoaEndereco);
    end;


end;

end.
